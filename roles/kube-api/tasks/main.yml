---
# tasks file for kube-api

- name: Downloading Kubernetes {{K8_VER}} Packages - API Server
  become: yes
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{K8_VER}}/bin/linux/amd64/kube-apiserver
    dest: /usr/local/bin
    mode: '0777'

- name: Downloading Kubernetes {{K8_VER}} Packages - Kubectl
  become: yes
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{K8_VER}}/bin/linux/amd64/kubectl
    dest: /usr/local/bin
    mode: '0777'

- name: Copying the admin-csr file to /opt/certs
  become: yes
  template:
    src: admin-csr.json.j2
    dest: /opt/certs/admin-csr.json

- name: Generating the Admin Keys
  become: yes
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin && chmod 755 *
  args:
    chdir: /opt/certs

- name: Copying the service-account-csr file to /opt/certs
  become: yes
  template:
    src: service-account-csr.json.j2
    dest: /opt/certs/service-account-csr.json

- name: Generating the Service Account Keys
  become: yes
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes service-account-csr.json | cfssljson -bare service-account && chmod 755 *
  args:
    chdir: /opt/certs

- name: Creating Encryption Key
  become: yes
  shell: head -c 32 /dev/urandom | base64
  register: encrypted_key

- name: Copying the encryption-config.yaml file to /opt/configs
  become: yes
  template:
    src: encryption-config.yaml.j2
    dest: /opt/configs/encryption-config.yaml

- name: Copying the kube-apiserver.service file to /etc/systemd/system
  become: yes
  template:
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
  notify: Start Kube-API-Server


- name: Generating the Admin Config - Set Cluster
  become: yes
  shell: kubectl config set-cluster {{ K8_CLUSTER_NAME }} --certificate-authority=/opt/certs/ca.pem --embed-certs=true --server=https://{{ ansible_enp0s8.ipv4.address }}:6443 --kubeconfig=admin.kubeconfig
  args:
    chdir: /opt/configs

- name: Generating the Admin Config - Set Credentials
  become: yes
  shell: kubectl config set-credentials admin --client-certificate=/opt/certs/admin.pem --client-key=/opt/certs/admin-key.pem  --embed-certs=true --kubeconfig=admin.kubeconfig
  args:
    chdir: /opt/configs

- name: Generating the Admin Config - Set Context
  become: yes
  shell: kubectl config set-context default --cluster={{ K8_CLUSTER_NAME }} --user=admin  --kubeconfig=admin.kubeconfig
  args:
    chdir: /opt/configs

- name: Generating the Admin Config - Use Context
  become: yes
  shell: kubectl config use-context default --kubeconfig=admin.kubeconfig
  args:
    chdir: /opt/configs
